{"transpiled":true,"noir_version":"0.32.0+92ff2fa2e944722e5c3fa43fb3363f093b8f1d12","name":"TokenBridge","functions":[{"name":"get_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/83YS2/TQBAH8HXSpi2JX3k1duzESWxy4EIPcOXGEXFGQoiXKgQCIcoBPiKfip3ZHf/jGiwtqiIsOXZn55cZb2xroVR9pc71rlSu7NbTERWogT54tD9RcmYGlRcoT0IVDbKqbJrqb/XHvUq+qveIBtiFFDvhz9MHfE5neh+UyiN6ckrfTKXNUEntKQIXlbR3pjhI2wV9mBxi5yVG9Bc+ozZM8plNHlY9E1RDsKHJuTCnTL8gLHTElBJGoCPQkaU3CAv1mVKCD+qD+pYWCAsNmFJCABqABpZ+QFhoyJQSQtAQNLT0M8JCI6aUEIFGoJE5tkngTkZ3XkVf02uEhcZMKSEGjUFjSz8hLHTMlBLGoGPQcbvRcd1oB9HVfiIsdMKUEiagE9CJpe8RFjplSglT0Cno1NJ3CAudMaWEGegMdEbHDT1aN3gwI4YKT6M8fpStKnlE9TeeKGxzLjVvlro0eGZOZYRuwUskJXjA0wGfpjZ/aV8gmceJGYVo546/mr/kcslklaQtUNgM9EyQBqVCQkd6Oq8P2rrV8GNP7kHbyql5l/XxiqPTh4132fyv77JZ8132FBXnNnnBnVLtBdgCv9jC0u8IC03qi0wOJhc0wa/ZJGE30dXeIiw0ZcpzCJqCpu1qaf1qcCSBOxm6k9Cd+N1Ez9w1wkKXTFNzfwtdgi7b1Zb1K8CRjLqJbvAVwkLN00IJGWgGmrWrZXU1RzLsJrrBjwgLzZlSQg6ag+btank9g44kdCe+O0ncSfS/XsvwKI3F3UTfOD8QFrpiSgkr0BXoql1tVU9DB9HV3iAsdM2UEtaga9B1u9q6vk0die9OEncSuZP4KOQfZmx655Os74JvCAstmFJCAVqAFu1qRf02dSTRUaoE7iQ5yrXERyF5N6HFqfcSa8Mrhn9YTheN5XTRXE5vuNSmWWprcGFOZYQWn1sklVhjVmY5Xdn8+3YNuzfL6T2FaOeOX5i/5HLJ7CtJ26GwGeiZIA1KhZKOOsN7ftDWrYbr5fRVycvnw42X1fwfFGz6B5ddz94As7dtrqw3+56FHqaett3BzJjp2EmzfN30b+yK+7Jb39ThtIpnoKp72PIvo+wv09vR6eIX7b8BjQdIV3MRAAA=","debug_symbols":"5ZzvSlxXHEXfZT6Hcs/e56+vUkoxiSmCaIimUKTv3rGO2tABWYQdmPgpGT2/wz0uFsjycO93Hy/ef/3j98vrTze3u7Nf73dXNx/O7y5vrvef7nfbL2X796u3n8+vH75we3f+5W53tr3bXVx/3P/797vdp8uri91Z3//3f8tWa4eFa4znpaX4yNpq9cPiareX1epHVvfa1mF1r+Pb1b+9e3ju8h3PXTbrsLJsrf7gJ9f3/MRXeXnw9sqDF231abX69sqDj77GYfUYdTvy4M48+OPmNbl5S27ek5uP5OYzufkKbq4tuXlJbq7k5klDlTRUSUOVNFRJQ5U0VElDnTTUSUOdNNRJQ5001ElDnTTUSUOdNNRJQ2vS0Jo0tCYNrUlDa9LQmjS0Jg2tSUNr0tCaNLQlDW1JQ1vS0JY0tCUNbUlDW9LQljS0JQ1tSUN70tCeNLQnDe1JQ3vS0J40tCcN7UlDe9LQnjR0JA0dSUNH0tCRNHQkDR1JQ0fS0JE0dCQNHUlDZ9LQmTR0Jg2dSUNn0tCZNHQmDZ1JQ2fS0Jk0dCUNXUlDV9LQlTR0JQ1dSUNX0tCVNHQlDV1JQ8u2RXcv0d0V3T16a2Gr0d2j9xa26MWFLXpzYYteXdiirpaoqyXqaom6mr1hlL1ilL1jBC4ZHQYGHZh0YMEBcGnnMFDogOiA6UClA40OUNKipEVJi5I2JW1K2pS0KWlT0qakTUmbkjYlbUq6UtKVkq6UdKWkKyVdKelKSVdKulLSlZJulHSjpBsl3SjpRkk3SrpR0o2SbpR0o6Q7Jd0p6U5Jd0q6U9Kdku6UdKekOyXdKelBSQ9KelDSg5IelPSgpAclPSjpQUkPSnpS0pOSnpT0pKQnJT0p6UlJT0p6UtKTkl6U9KKkFyW9KOlFSS9KelHSi5JelPSCpLVtdKDQAdEB04FKBxod6HRg0IFJByjpQkkXSrpQ0oWSLpR0oaRpIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRiTYy0UYm2shEG5loIxNtZKKNTLSRmTYy00Zm2shMG5lpIzNtZKaNzLSRmTYy00Zm2shMG5lpIzNtZKaNzLSRmTYy00Zm2shMG5lpIzNtZKaNzLSRmTYy00Zm2shMG5lpIzNtZKaNzLSRmTYy00Zm2shMG5lpIzNtZKaNzLSRmTYy00Zm2shMG5lpIzNtZKaNzLSRmTYyH29k+98dn16wuf8lT/8dO/KayrI9vXiylFaeF5d27DWVrc2n1a3rZevjL7Vs1c+ra/crq+doT2/6nHMr36x+PO7xYPfzHldv67h+W8etb+u47W0dt//w4w69HPe1A5TSX/Ye/WX1eH7h4Dj1A8xTP8A68QMc/zPNKR2gnPoBdLoH2H/68/zL5fn7q4uHt+U/fPPr9Yenl+fvP9799fnxO/u1/wA="},{"name":"exit_to_l1_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"get_portal_address","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"claim_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"item","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"revert_code","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"start_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"end_gas_left","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_stack_item_compressed::PublicCallStackItemCompressed"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"_call_mint_on_token","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"5Z3hjlW5EYTfZX6jyK5ud9u8ShRF7C4bIaFhtbCRIrTvngHunQvKTS4lpk2d8AsGfOwyTdWZ+cY9fn/3y8uf/vjH31/d//rm7d3zv76/e/3m5xfvXr25f/jo/V37S+8f//Ttby/uP/zB23cvfn9397w9u3t5/8vDr38+u/v11euXd8+j/fm3Zx/Ggxxv5Hgnxw9yfJDjkxw/yfHrq8c/+49ha4zTwJX5OLR3uzLWDXEa7GbjMhpxZXT4WKfR4fnl6I+60b5Bd2+G08jehm9W3r/lX3z1i/BxQ3hH8/NoRLshPGPlaXSmtyvCUSP80+RWOblXTj4qJ4/KybNy8lk5+Sqc3Frl5L1y8kqHWqVDrdKhVulQq3SoVTrUKh1qlQ71Sod6pUO90qFe6VCvdKhXOtQrHeqVDvVKh3qlQ0elQ0elQ0elQ0elQ0elQ0elQ0elQ0elQ0elQ0elQ6PSoVHp0Kh0aFQ6NCodGpUOjUqHRqVDo9KhUenQrHRoVjo0Kx2alQ7NSodmpUOz0qFZ6dCsdGhWOnRWOnRWOnRWOnRWOnRWOnRWOnRWOnRWOnRWOnRWOnRVOnRVOnRVOnRVOnRVOnRVOnRVOnRVOnRVOnRVOrS3Vjp7L50dpbNb6exeOvsonT1KZ8/S2Wfp7KVe7aVe7aVe7aVe7aVe7aVe7aVe7aVe7aVe7aVe7aVeRalXUerV0qNGvfSsUS89bNS/6bSR+zyfTXNfn53Yu36SLfp53ghcOcnWv+l00hMfq+tgT0qCPSpJnDr69ABxkuj0AHsa1ujjsOx5WOJkzukB9kSssUdija20sZU2ttLOVtrZSjtbaadPPrOVdrbSzlba2Uo7W2lnKz3YSg+20oOt9GArPdhKD7bSg630YCs92EoPttLBVjrYSgdb6WArHWylg+5nYCsdbKWDrXSwlU620slWOtlKJ1vpZCudbKWTbl1hK51spZOt9GQrPdlKT7bSk630ZCs92UpPttKT7lJiKz3ZSi+20out9GIrvdhKL7bSi630Yiu92EovuiGNrDRaYx/o7ANgHzD2AWcfGOwDwT6Q7AOTfYCtdGcrzXaXgm0vBdtfCrbBFGyHKdgWU7A9pmCbTNHZSoOtNNhKg6002EqDrTTYSoOtNMvIwDIysIwMLCMDy8jAMjKwjAwsIwPLyMAyMrCMDCwjA8vIwDIysIwMLCMDy8jAMjKwjAwsIwPLyMAyMrCMDCwjA8vIwDIysIwMLCMDy8jAMjKwjAwsIwPLyMAyMrCMDCwjA8vIwDIysIwMLCMDy8jAMjKwjAwsIwPLyMAyMrCMDCwjA8vIwDIysIwMLCMDy8jAMjKwjAwsIwPLyMAyMrCMDCwjA8vIwDIysIwMLCMDy8jAMjKwjAwsIwPLyMAyMrCMDCwjA8vIjGVkxjIyYxmZsYzMWEZmLCMzlpEZy8iMZWTGMjJjGZmxjMxYRmYsIzOWkRnLyIxlZMYyMmMZmbGMzFhGZiwjM5aRGcvIjGVkxjIyYxmZsYzMWEZmLCMzlpEZy8iMZWTGMjJjGZmxjMxYRmYsIzOWkRnLyIxlZMYyMmMZmbGMzFhGZiwjM5aRGcvIjGVkxjIyYxmZsYzMWEZmLCMzlpEZy8iMZWTGMjJjGZmxjMxYRmYsIzOWkRnLyIxlZMYyMmMZmbGMzFhGZiwjM5aRGcvIjGVkxjIyYxmZsYzMWEZmLCMzlpEZy8iMZWTGMjJjGZmxjMxYRmYsIzOWkRnLyIxlZMYyMmMZmbGMzFhGZiwjM5aRGcvIjGVkxjIyYxmZXWdkD7jj3HX0wCXi88eu/ADt3s4/Erv30R8H93GtRWmMeR49AriMvtrQNNweR3vYjdEzx1n2nK1/Mfrjdv06sPv/3S5+rO3aj7Vd/7G2O36s7cb27SYu2721gQcdl7nzIqTn44+fzqNvYB59A+vgG7j+bZojbaAffQM4+gb+y+cE7bKB7Lc24OOySF5bxHcsMnYsEjsWyR2LzB2LrA2LoO1YpO9YBDsW2eF47HA8djgeOxyPHY7HDsdjh+Nth+Nth+Nth+PtCRyPMR5vu8OY63G4tXVlfOb50ricl087EHmW5HqShp6k0JOUepKmnqQlJ8mbnqSuJwl6kvTS2/XS2/XS2/XS2/XS2/XSe+zPpT7m+buQD7+9/GRCX2dNENS033M9LrAskFc0haCmFNQ0BTUtPU3RBDV1QU0Q1GSCmlxQU3WOn5aJPcvknmXmnmXWlmWy7Vmm71kGe5axPcv4nmX2pEDuSYF8ihSIdlkm3L/xy4qcepKWnKTZ9CR1PUnQk2R6klxP0tCTFHqS9NJ76qX31EvvpZfeSy+9l156r/0hcJMvrpTTNNr+/+C3vn4frQtqgqAmE9TkgpqGoKYQ1JSCmqagpqWnqVfn+GmZvmcZ7FnmSQJ02uMyGXltGd+zzNizTOxZJvcsM/css7Ysg7Znmb5nGexZZk8KYE8KYE8KfMUx8tX+9zKr2zmgF75o/elXRiMwT6MfJM3PRl/tt7Q834w5HeuL0acN5NE3MI++gXXwDXzFsX3xDfSjb8COvoFx9A0cPUbt6DFqR49RP3qM+tFj9Cu6BMQ3cPT3wFd0IIhv4OgvMj/6FzR+9DexH/1N7Ed/E4+jv8jG0V9k4+gvsnH0F9k4+otsbH+RzXmeGnPNa5JST9LUk7TkJEXTk9T1JEFPkulJcj1JQ0+SXnqHXnqHXnqHXnqnXnqnXnqnXnqnXnqnXnqnXnqnXnqnXnqnXnqnXnpPvfSeeuk99dJ76qX31EvvqZfeUy+9p156T730nnrpvfTSe+ml99JL76WX3ksvvZdeei+99F566b300nvJpXc0ufSOJpfe0eTSO5pcekeTS+9ocukdTS69o8mldzS59I6ml95dL727Xnp3vfTueund9dK766V310vvrpfeXS+9u156Qy+9oZfe0Etv6KU39NIbeukNvfSGXnpDL72hl96ml96ml96ml96ml96ml96ml96ml96ml96ml96ml96ul96ul96ul96ul96ul96ul96ul96ul96ul96ul95DL72HXnoPvfQeeuk99NJ76KW3Xq9l6PVahl6vZej1WoZer2Xo9VqGXq9l6PVahl6vZej1WoZer2Xo9VqGXq9l6PVahl6vZej1WoZer2Xo9VqGXq9l6PVaRurdphLf4Uq825qWnqbvcCnebU1dUBMENZmgJhfUNAQ16d2KFVMwx6dgjk/BHF+COb70bg+LpXd7WCy928NiuaAmvdvDYundHhZL7/awWHq3h8XSuz0sBW+BTMFbIFPwFsgUvAUym16Op+AtkCl4C2QK3gKZgrdApuAtkNkFc7wL5ngXzPEumONdMMe7YI53wRzvgjneBXO8C+Y4BHMcgjkOwRyHYI5DMMchmON4iiwY46JpzHVL0w2emdYENXVBTRDUZIKaXFDTENQUgppSUNMU1CSY4y6Y4y6Y4y6Y4/4dcvzW5yrugpqGoKYQ1JSCmqagpqWnaTRBTV1QEwQ1Ceb4EMzxIZjjQzDHh2COD8EcH4I5HoI5HoI5HoI5HoI5HoI5HoI5HoI5HoI5HoI5HoI5noI5noI5noI5noI5noI5noI5noI5nlo5/vDBP1/8/urFT69fvn145MPf/XH/87tXb+5PH77712+f/uZh7L8B"},{"name":"exit_to_l1_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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sm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6Usm6U3uRG1cXlXL4vz8pvNGOhp9PF+tXKynZuJvbUzC3I1lLO3/gyXMr7+Oqzbi19fKW42lq6vYfUy9qFe7Vnp59av0m6evzm2Qtab2tOK2Xju3iToPX4R1ovrbSNv743CVp/oryw5ZUtb2x5Z8s3tnyw5Ttavi1seZbaxlLbWGobS21jqW0stY2ltrHUNpbaYKkNltpgqQ2W2mCpDZbaYKkNltpgqQ2W2s5S21lqO0ttZ6ntLLWdpbaz1HaW2s5S21FqbVnY8oUtX9nywpZXtryx5Z0t39jywZZnqS0stYWltrDUFpbawlJbWGoLS21hqS0stYWltrLUVpbaylJbWWorS21lqa0stZWltrLUVpZaYakVllphqRWWWmGpFZZaYakVllphqRWWWmWpVZZaZalVllplqVWWWmWpVZZaZalVllpjqTWWWmOpNZZaY6k1llpjqTWWWmOpNZZaZ6ll3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shj3Shn3Shn3Shn3Shn3ShflC1vbHlnyze2fLDlWWpZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8pZN8q33Sjz88rRXr99iVJ7OZ0tonK5hG0tVrWIcq58vfl0cw2rNVnbt+ZtcDrivFU1ujw//RR2W6WaNWzJFLZmCiuZwmqmsJYprGcK2zKFTTVU9Dxh27bW6st6kcd/ChiElWW5hL1q32OrfYu2tu+1jsKqnE+ryyhsO39wQ8T1BzdcwtZMYSVTWM0U1jKF9Uxh23cO2+ol7Kj90nVtv3S7fIZKDV3bj2O33w/dflmO3X45dvv12O3LsdvXm9s/fxLW489V41n7p0sYfwnnL9H4SwR/iY5foi78JQp/icpfQvhL8HRXnu7K0115uitPd+XpFp5u4ekWnm7h6RaebuHpFp5u4ekWnm7h6VaebuXpVp5u5elWnm7l6VaebuXpVp5u5ek2nm7j6TaebuPpNp5u4+k2nm7j6TaebuPpdp5u5+l2nm7n6Xaebufpdp5u5+l2nm7n6W483Y2nu/F0N57uxtPdeLobT3fj6W483Y2nO3i6g6c7eLqDpzt4uoOnO3i6g6c7eLqDp7vzdHee7s7T3Xm6O0935+nuPN2dp7vzdHec7lgW/hKFv0TlLyH8JZS/hPGXcP4Sjb9E8Jfg6S483YWnu/B0F55u3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lUL3lWL21010/P2O+vDRSB/5fa7uN2aO1DY2/29I4UtmcLWTGElU1jLFNYzhW2ZwmYaKnqioaLfrg37ct7t5hb7DlszhZVMYTVTWMsU1jOFbZnCRqawPVHYkmmouP25iSOFveVz7aysP7s0uYpZZOOsSl2/KSpig8Zdra/fbm221fgtn5hnun5bLHzUeJU1pdbrP83Nxlvra+MtpDxv/PGrf7/+7e3rH9+9+fj4/3z5zd/f//Tp7Yf3py8//efXp995PPtf"},{"name":"claim_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":""},{"name":"get_portal_address_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/62UTY7TQBCFy06cTIhjO07scRIj8WOLBWvYcgPugARCSAiENCuWHIFjcamhX1VXXn6kkUaaltouV7+vq7ra3YNMRG5CF3kusaXBI4XMwitB/yBu2aAkhSTuGjGo1BhlMnkVHs9Gnyp9hwHlSvim+szeqg0r9NkgCdBphpkR2oYGpCcAFqOnNxd1oi3wMA2wm4EjYcKPSMPE8yhejqk5ZUlsaZqFmYr+pNvRXFEIcqI50Tyid3Q7ulIUghXRFdFVRF/Q7WihKAQF0YJoEdFvdDtaKgpBSbQkWkb0B92OVopCUBGtiFb2vkaKxyP5k0cJa/pEt6NrRSFYE10TXUf0O92O1opCUBOtidbXidbHRB9AQrTfdDu6URSCDdEN0U1Ev9Dt6FZRCLZEt0S3Ef1Mt6ONohA0RBuiDd4vcbTueDArBYWn0Y8f1DL6EQ0zToWt1VDteahbgxszfQS/4C1FOx7w/UzNfdQf4gXSJyrs4ULXjH/Zly8XTD+6rGNgG0jNiUGPsMMbp/PrSVoXCb9P/B8c9Eo7bZhypjeq9WsF4MwUGesLb3esb8v6ducXX/MmjVPjq2WVdtTEgu3ikqwyf2Bp5rFN4s5AdtAaoYydZdbZxpzlfh8aVKY42FZk9xcNQU2B2HvOcRJaelNgU/r0OJ1u5cWnHD/351w7V7OJq+h1kX9hcZGjF7AdY1UlfQ2z+4f+Hypm31MSBwAA","debug_symbols":"7dvbahpRFMbxd5lrKfuwDnv7KqUUk5giiIZoCkX67h0bxwMO9SL8o1avEnWx5tsLfuwElqvmafzw9uP7ZPY8XzTDr6tmOn8cLSfzWftq1YQvMfx9d/Eymq3fWCxHr8tmGAbNePbU/vw9aJ4n03EztPbXo7Kquims7tvSGHNPreRkm2LJWXfVyXqqTbRuqk38sPrbYJ07fiB3DDltKmNQ+eTk6SMTr3EXXE8EjylIV50snAjuVn1T7S6hJ3hmgr83F7K5ks2NbO5k80I2r2DzFMjmkWyeyOak0EQKTaTQRApNpNBECk2k0EwKzaTQTArNpNBMCs2k0EwKzaTQTArNpFAhhQopVEihQgoVUqiQQoUUKqRQIYUKKVRJoUoKVVKokkKVFKqkUCWFKilUSaFKCjVSqJFCjRRqpFAjhRop1EihRgo1UqiRQp0U6qRQJ4U6KdRJoU4KdVKok0KdFOqk0EIKLaTQQgotpNBCCi2k0EIKLaTQQgotpNBKCq2k0EoKraTQSgqtpNBKCq2k0EoKraTQGALaPaLdE9od3VoIgnZH9xYCurgQ0M2FgK4uBNRqRK1G1GpErbIbRuyKEbtj1L9kVLarZqXqv58QPW4f4fuPsNJTrVq6XTC1lHbVvZtjKnlbLZZPVBfXbp2ulBAPqjeHLTd02P5Vpv/1sPGWDptu6bD5lg4rt3RY/eTDetod9lR8L11634vRPrELb9cc3q85fLnm8PWKw+dwzeHjNYdPlxze8ja8HYTv+X8kd5Gr1RO1rmXbd/dVmiTdTPJ9Jkczuegr9UwzuejL7kwzuehr6DwzkYu+3c40k4u+NM80k/tdfDyT+118PBO5z+RoJve/T/Zn0r74OXqdjB6m4/W35tefvc0euy/Rty+Xv17eP2lr/wA="}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"token","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"portal_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_public_parameters"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"TokenBridge::constructor_parameters"}}],"kind":"struct","path":"TokenBridge::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::claim_private_parameters"}}],"kind":"struct","path":"TokenBridge::claim_private_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"TokenBridge::get_token_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"TokenBridge::get_portal_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::claim_public_parameters"}}],"kind":"struct","path":"TokenBridge::claim_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::_call_mint_on_token_parameters"}}],"kind":"struct","path":"TokenBridge::_call_mint_on_token_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"TokenBridge::get_portal_address_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"caller_on_l1","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_private_parameters"}}],"kind":"struct","path":"TokenBridge::exit_to_l1_private_abi"}]}},"file_map":{"100":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<let N: u32>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"103":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"104":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"105":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"108":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"109":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"113":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"114":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/messaging.nr","source":"use crate::{\n    hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness\n};\n\nuse std::merkle::compute_merkle_root;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_message_hash(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret_hash\n    );\n\n    let returned_message = get_l1_to_l2_membership_witness(storage_contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = compute_merkle_root(message_hash, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    compute_message_nullifier(message_hash, secret, leaf_index)\n}\n"},"117":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{enqueue_public_function_call_internal, set_public_teardown_function_call_internal}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, gas::Gas,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, public_call_stack_item::PublicCallStackItem,\n    public_call_stack_item_compressed::PublicCallStackItemCompressed, read_request::ReadRequest,\n    note_hash::NoteHash, nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        let call_request = PublicCallRequest { item, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = PublicCallStackItemCompressed {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty()\n        };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            item,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"121":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"122":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"126":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<let N: u32>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N as Field)\n}\n\nunconstrained fn storage_write<let N: u32>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<let N: u32>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<let N: u32>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"},"132":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"134":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"149":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"156":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, T_SERIALIZED_LEN> PublicMutable<T, UnconstrainedContext> where T: Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"168":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once. \n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, T_SERIALIZED_LEN> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"171":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"173":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"175":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"197":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"205":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"206":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes = max_value.to_be_bytes(32);\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"216":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"222":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"23":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"237":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x:fields[0], y: fields[1], is_infinite: fields[2] as bool},\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"24":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"266":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"267":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"27":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constraint the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::from_slice(domain_generators.as_slice());\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = crate::field::bn254::decompose_hint(scalar);\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"283":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"284":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"305":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash},\n    note::utils::compute_note_hash_for_consumption, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n// TOKEN_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) &\n        (self.npk_m_hash == other.npk_m_hash) &\n        (self.randomness == other.randomness)\n    }\n}\n"},"306":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_consumption},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): Ensure nullifier collisions are prevented\n    fn compute_note_hash_and_nullifier(self, _context: &mut PrivateContext) -> (Field, Field) {\n        self.compute_note_hash_and_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all"},"309":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-contracts/contracts/token_contract/src/main.nr","source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        hash::compute_secret_hash,\n        prelude::{NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress},\n        encrypted_logs::{\n        encrypted_note_emission::{\n        encode_and_encrypt_note, encode_and_encrypt_note_with_keys,\n        encode_and_encrypt_note_with_keys_unconstrained\n    },\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    }\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{transparent_note::TransparentNote, token_note::{TokenNote, TOKEN_NOTE_LEN}, balances_map::BalancesMap};\n    // docs:end::imports\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        storage.balances.add(caller, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, caller, caller));\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let pending_shields = storage.pending_shields;\n        let secret_hash = compute_secret_hash(secret);\n        // Get 1 note (set_limit(1)) which has amount stored in field with index 0 (select(0, amount)) and secret_hash\n        // stored in field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n        let notes = pending_shields.get_notes(options);\n        let note = notes.get(0);\n        // Remove the note from the pending shields set\n        pending_shields.remove(note);\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        storage.balances.add(to, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, from_ivpk, from));\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk, to));\n\n        Transfer { from, to, amount: amount.to_field() }.emit(encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk, to));\n    }\n    // docs:end:transfer\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier, 0);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, from_ivpk, from));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, to_ivpk, to));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n// docs:end:token_all"},"32":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"323":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr","source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, caller_on_l1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let caller_on_l1_bytes = caller_on_l1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n"},"34":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"43":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"49":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"52":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"60":{"path":"/home/ayush/Code/Defi-Bridge/src/main.nr","source":"contract TokenBridge {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, EthAddress, PublicMutable, SharedImmutable};\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use dep::token::Token;\n\n    #[aztec(storage)]\n    struct Storage {\n        token: PublicMutable<AztecAddress>,\n        portal_address: SharedImmutable<EthAddress>,\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(token: AztecAddress, portal_address: EthAddress) {\n        storage.token.write(token);\n        storage.portal_address.initialize(portal_address);\n    }\n\n    #[aztec(private)]\n    fn get_portal_address() -> EthAddress {\n        storage.portal_address.read_private()\n    }\n\n    #[aztec(public)]\n    fn get_portal_address_public() -> EthAddress {\n        storage.portal_address.read_public()\n    }\n\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, secret: Field, message_leaf_index: Field) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret,\n            storage.portal_address.read_public(),\n            message_leaf_index\n        );\n\n        Token::at(storage.token.read()).mint_public(to, amount).call(&mut context);\n    }\n\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthAddress,\n        amount: Field,\n        caller_on_l1: EthAddress,\n        nonce: Field\n    ) {\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(storage.portal_address.read_public(), content);\n\n        Token::at(storage.token.read()).burn_public(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field,\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field\n    ) {\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            storage.portal_address.read_private()\n        );\n\n        TokenBridge::at(context.this_address())._call_mint_on_token(amount, secret_hash_for_redeeming_minted_notes).enqueue(&mut context);\n    }\n\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthAddress,\n        amount: Field,\n        caller_on_l1: EthAddress,\n        nonce: Field\n    ) {\n        let content = get_withdraw_content_hash(recipient, amount, caller_on_l1);\n        context.message_portal(storage.portal_address.read_private(), content);\n\n        Token::at(token).burn(context.msg_sender(), amount, nonce).call(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_token() -> AztecAddress {\n        storage.token.read()\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(amount, secret_hash).call(&mut context);\n    }\n}\n"},"76":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\npub fn compute_inner_note_hash<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, let N: u32, let M: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let M: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"90":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point { x: x_coordinate, y: y_coordinate, is_infinite: false }\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"93":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"97":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr","source":"use dep::protocol_types::{address::AztecAddress};\n\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n"},"98":{"path":"/home/ayush/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.47.1/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n"}}}