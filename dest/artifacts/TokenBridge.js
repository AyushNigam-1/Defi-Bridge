/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, loadContractArtifact, NoteSelector, } from '@aztec/aztec.js';
import TokenBridgeContractArtifactJson from '../../target/token_contract-TokenBridge.json' with { type: 'json' };
export const TokenBridgeContractArtifact = loadContractArtifact(TokenBridgeContractArtifactJson);
/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TokenBridgeContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TokenBridgeContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, token) {
        return new DeployMethod(Fr.ZERO, wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet, token) {
        return new DeployMethod(publicKeysHash, wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TokenBridgeContractArtifact;
    }
    static get storage() {
        return {
            admin: {
                slot: new Fr(1n),
            },
            minters: {
                slot: new Fr(2n),
            },
            balances: {
                slot: new Fr(3n),
            },
            total_supply: {
                slot: new Fr(4n),
            },
            pending_shields: {
                slot: new Fr(5n),
            },
            public_balances: {
                slot: new Fr(6n),
            },
            symbol: {
                slot: new Fr(7n),
            },
            name: {
                slot: new Fr(8n),
            },
            decimals: {
                slot: new Fr(9n),
            }
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(1049878767),
            },
            TokenNote: {
                id: new NoteSelector(3992089675),
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5CcmlkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXJ0aWZhY3RzL1Rva2VuQnJpZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUtaLEVBQUUsRUFHRixvQkFBb0IsRUFFcEIsWUFBWSxHQUtiLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTywrQkFBK0IsTUFBTSw4Q0FBOEMsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNuSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxvQkFBb0IsQ0FBQywrQkFBdUQsQ0FBQyxDQUFDO0FBSXpIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLFlBQVk7SUFFbkQsWUFDRSxRQUFxQyxFQUNyQyxNQUFjO1FBRWQsS0FBSyxDQUFDLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBSUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDcEIsT0FBcUIsRUFDckIsTUFBYztRQUVkLE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsbUJBQW1CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBaUMsQ0FBQztJQUNwRyxDQUFDO0lBR0Q7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxLQUF1QjtRQUMxRCxPQUFPLElBQUksWUFBWSxDQUFzQixFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSwyQkFBMkIsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNySixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsY0FBa0IsRUFBRSxNQUFjLEVBQUUsS0FBdUI7UUFDaEcsT0FBTyxJQUFJLFlBQVksQ0FBc0IsY0FBYyxFQUFFLE1BQU0sRUFBRSwyQkFBMkIsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1SixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUMxQixJQUF5RCxFQUN6RCxHQUFHLElBQW1EO1FBRXRELE9BQU8sSUFBSSxZQUFZLENBQ3JCLElBQUksQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLElBQUksRUFDOUIsSUFBSSxDQUFDLE1BQU0sRUFDWCwyQkFBMkIsRUFDM0IsbUJBQW1CLENBQUMsRUFBRSxFQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDOUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQzdCLENBQUM7SUFDSixDQUFDO0lBSUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLDJCQUEyQixDQUFDO0lBQ3JDLENBQUM7SUFHTSxNQUFNLEtBQUssT0FBTztRQUNyQixPQUFPO1lBQ0wsS0FBSyxFQUFFO2dCQUNULElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7WUFDTCxPQUFPLEVBQUU7Z0JBQ0gsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNqQjtZQUNMLFFBQVEsRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1lBQ0wsWUFBWSxFQUFFO2dCQUNSLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7WUFDTCxlQUFlLEVBQUU7Z0JBQ1gsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNqQjtZQUNMLGVBQWUsRUFBRTtnQkFDWCxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1lBQ0wsTUFBTSxFQUFFO2dCQUNGLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7WUFDTCxJQUFJLEVBQUU7Z0JBQ0EsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNqQjtZQUNMLFFBQVEsRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1NBQ3VKLENBQUM7SUFDekosQ0FBQztJQUdJLE1BQU0sS0FBSyxLQUFLO1FBQ3JCLE9BQU87WUFDTCxlQUFlLEVBQUU7Z0JBQ2IsRUFBRSxFQUFFLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQzthQUNqQztZQUNULFNBQVMsRUFBRTtnQkFDRCxFQUFFLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDO2FBQ2pDO1NBQzhDLENBQUM7SUFDdEQsQ0FBQztDQWdDRiJ9