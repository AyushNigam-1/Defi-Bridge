/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, loadContractArtifact, NoteSelector, } from '@aztec/aztec.js';
import TokenBridgeContractArtifactJson from '../../target/token_contract-TokenBridge.json' with { type: 'json' };
export const TokenBridgeContractArtifact = loadContractArtifact(TokenBridgeContractArtifactJson);
/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TokenBridgeContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TokenBridgeContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, token) {
        return new DeployMethod(Fr.ZERO, wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet, token) {
        return new DeployMethod(publicKeysHash, wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, TokenBridgeContractArtifact, TokenBridgeContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TokenBridgeContractArtifact;
    }
    static get storage() {
        return {
            admin: {
                slot: new Fr(1n),
            },
            minters: {
                slot: new Fr(2n),
            },
            balances: {
                slot: new Fr(3n),
            },
            total_supply: {
                slot: new Fr(4n),
            },
            pending_shields: {
                slot: new Fr(5n),
            },
            public_balances: {
                slot: new Fr(6n),
            },
            symbol: {
                slot: new Fr(7n),
            },
            name: {
                slot: new Fr(8n),
            },
            decimals: {
                slot: new Fr(9n),
            }
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(1049878767),
            },
            TokenNote: {
                id: new NoteSelector(3992089675),
            }
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(fieldsLength, eventSelector, fields) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (!eventSelector.equals(payload.eventTypeId)) {
                return undefined;
            }
            if (payload.event.items.length !== fieldsLength) {
                throw new Error('Something is weird here, we have matching EventSelectors, but the actual payload has mismatched length');
            }
            return fields.reduce((acc, curr, i) => ({
                ...acc,
                [curr]: payload.event.items[i],
            }), {});
        };
    }
    static get events() {
        return {
            TokenBurned: {
                decode: this.decodeEvent(4, EventSelector.fromSignature('TokenBurned(Field,Field,Field,Field)'), ["from", "amount", "is_private", "nonce"]),
                eventSelector: EventSelector.fromSignature('TokenBurned(Field,Field,Field,Field)'),
                fieldNames: ["from", "amount", "is_private", "nonce"],
            },
            TokenMinted: {
                decode: this.decodeEvent(3, EventSelector.fromSignature('TokenMinted(Field,Field,Field)'), ["to", "amount", "is_private"]),
                eventSelector: EventSelector.fromSignature('TokenMinted(Field,Field,Field)'),
                fieldNames: ["to", "amount", "is_private"],
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5CcmlkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXJ0aWZhY3RzL1Rva2VuQnJpZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUdaLGFBQWEsRUFFYixFQUFFLEVBR0Ysb0JBQW9CLEVBRXBCLFlBQVksR0FLYixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sK0JBQStCLE1BQU0sOENBQThDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDbkgsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsb0JBQW9CLENBQUMsK0JBQXVELENBQUMsQ0FBQztBQWtCekg7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsWUFBWTtJQUVuRCxZQUNFLFFBQXFDLEVBQ3JDLE1BQWM7UUFFZCxLQUFLLENBQUMsUUFBUSxFQUFFLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFJRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNwQixPQUFxQixFQUNyQixNQUFjO1FBRWQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFpQyxDQUFDO0lBQ3BHLENBQUM7SUFHRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLEtBQXVCO1FBQzFELE9BQU8sSUFBSSxZQUFZLENBQXNCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLDJCQUEyQixFQUFFLG1CQUFtQixDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JKLENBQUM7SUFFRDs7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